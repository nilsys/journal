<?php
/**
 * Created by PhpStorm.
 * User: xuant
 * Date: 10/2/2018
 * Time: 9:08 PM
 */

namespace app\models;
use Yii;
use yii\base\Model;
use yii\helpers\Inflector;
use app\models\Post;
use yii\web\UploadedFile;
use app\models\ServicePrice;


class OrderPost extends Model
{
    const SCENARIO_STEP1 = 'step1';
    const SCENARIO_STEP2 = 'step2';
    const SCENARIO_STEP3 = 'step3';
    public $step1 = false ;
    public $step2 = false;
    public $step3 = false;
    public $type_of_service;
    public $type_of_paper;
    public $subject_area;
    public $topic;
    public $paper_details;
    public $upload_file;
    public $Type_of_currency;
    public $paper_format;
    public $level;
    public $number_of_page;
    public $currency;
    public $urgency;
    public $id_writer;
    public $discount_code;
    public $total_prices;
    public $writer_level;
    public $customer_service;
    public $method;
    public $academic_level;
    public $file="";
    public $order_code;
    public $deadline;
    public $id_type_of_currency;
    public $token_order;
    public $payment_method;
    public $prices_order;

    public function rules()
    {
        //return parent::rules(); // TODO: Change the autogenerated stub
        $rules = [
             [['topic','paper_details','id_writer'],'filter','filter'=>'\yii\helpers\HtmlPurifier::process'],
             [['type_of_service'],'required','message'=>"can't be blank."],
            [['type_of_paper'],'required','message'=>"can't be blank."],
            [['subject_area'],'required','message'=>"can't be blank."],
            [['topic'],'required','message'=>"can't be blank."],
            [['paper_details'],'required','message'=>"can't be blank."],
            [['Type_of_currency'],'required','message'=>' không được bỏ trống.'],
            [['method'],'required','message'=>"can't be blank."],
            [['upload_file'],'required','message'=>"can't be blank."],
            [['urgency'],'required','message'=>"can't be blank."],
            [['writer_level'],'required','message'=>"can't be blank."],
            [['customer_service'],'required','message'=>"can't be blank."],
             ['id_writer','validateId'],
             [['upload_file'], 'file','message'=>'Chỉ cho phép các tài liệu có định dạng (doc,docx).', 'skipOnEmpty' => false,'extensions' => ['docx','doc']],
             [['id_writer'],'integer'],
         ];
         return array_merge(parent::rules(),$rules);
       /*return[
             [['type_of_service','type_of_paper','subject_area','topic','paper_details','academic_level','currency','writer_level','customer_service','method','upload_file',
                 'urgency'],'required', 'on' => self::SCENARIO_STEP1],
             ['id_writer','validateId'],
             [['upload_file'], 'file','extensions' => 'docx',],
             [['number_of_page','id_writer'],'integer'],
         ];*/
    }
    public function attributeLabels()
    {
        return [
            'topic' => "Topic *",
            'id_writer' => "Writer's ID ",
            'paper_details' => "Paper details *",
            'type_of_service' => 'Type of service *',
            'type_of_paper' => 'Type of paper *',
            'subject_area' => 'Subject area *',
            'discount_code' => 'Discount code',
            'upload_file'=>'Upload file *',
            'urgency'=>'Deadline *',
            'writer_level'=>'Writer level *',
            'customer_service'=>'Customer service *',
            'method'=>'Payment *',
            'Type_of_currency'=>'Currency *',
        ];
    }
    public function validateId($attribute, $params)
    {
        //if (!$this->hasErrors()) {
            $user = Editor::findOne($this->id_writer);
            if (!$user) {
                $this->addError($attribute, "Writer's ID not exist.");
            }

        //}
    }
    /*public function UploadFile()
    {
        $randomString = Yii::$app->getSecurity()->generateRandomString(20);
        $file = Inflector::slug($this->topic) . '_' . $randomString . '.' . $this->upload_file->extension;
        if(!$this->upload_file->saveAs('uploads_post/' .$file)){
            $this->addError('myFile','Unable to save the uploaded file');
        }
        $this->file = $file;
        return $file;
    }*/
    public function SaveTmpPost()
    {
        $tmp_post = new TmpPost();
        $upload_file = new UploadFile();
        $tmp_post->Id_Author = yii::$app->user->identity->getId();
        $tmp_post->Order_Code = $this->order_code;
        $tmp_post->Token_Order = $this->token_order;
        $tmp_post->Type_of_services = $this->type_of_service;;
        $tmp_post->Type_of_paper = $this->type_of_paper;
        $tmp_post->Subject_area = $this->subject_area;
        $tmp_post->Type_of_currency = '30';
        $tmp_post->File_Name = $upload_file->UploadFileOrder($this->upload_file);
        $tmp_post->Topic = $this->topic;
        $tmp_post->Decription = $this->paper_details;
        $tmp_post->Writer_Level = $this->writer_level;
        $tmp_post->Customer_Service = $this->customer_service;
        $tmp_post->PageNumbers = $this->number_of_page;
        $tmp_post->Date_Create = date('Y-m-d H:i:s');
        $tmp_post->Day = (ServicePrice::findOne($this->urgency))->Name_Service_Price;
        //split day
        $get_date = (ServicePrice::findOne($this->urgency))->Name_Service_Price;
        $day = explode(" ", $get_date);
        $deadline = date('Y-m-d H:i:s',strtotime("+".$day[0]."days"));
        $tmp_post->Deadline = $deadline;
        if ($this->id_writer!=""){
            $tmp_post->Id_Editor = $this->id_writer;
        }
        $tmp_post->Price = $this->prices_order;
        $tmp_post->Payment_Method = $this->payment_method;
        //$tmp_post->Type_Currency = $this->currency;
        return $tmp_post->save() ? $tmp_post : null;
    }
    public function SavePost($Topic,$Id_Author,$Type_of_services,$Type_of_paper,$Subject_area,$Type_of_currency,$PageNumbers,$File_Name,$Date_Create,$Deadline,$Id_Editor,$Price,$Status,$Token_Order,$Order_Code,$Payment_Method,$paper_details,$Day,$Writer_Level,$Customer_Service)
    {
        $post = new Post();
        $send_mail = new SendMail();
        $post->Topic = $Topic;
        $post->Id_Author = $Id_Author;
        $post->Type_of_services = $Type_of_services;
        $post->Type_of_paper = $Type_of_paper;
        $post->Subject_area = $Subject_area;
        $post->Type_of_currency = $Type_of_currency;
        $post->PageNumbers = $PageNumbers;
        $post->File_Name = $File_Name;
        $post->Date_Create = $Date_Create;
        $post->Day = $Day;
        $post->Deadline = $Deadline;
        $post->Decription = $paper_details;
        $post->Writer_Level = $Writer_Level;
        $post->Customer_Service = $Customer_Service;
        $post->Price = $Price;
        $post->Status = $Status;
        $post->Token_Order  = $Token_Order;
        $post->Order_Code = $Order_Code;
        $post->Payment_Method = $Payment_Method;
        $post->Status_Order = "Paided";

        //$post->Type_Currency = $this->currency;
        $send_mail->SendMail(Yii::$app->user->identity->getId(),'ordercompleted-html','ordercompleted-text','Order completed');
        if ($Id_Editor!=""){
            $post->Status = "Waiting editor";
            $post->Id_Editor = $Id_Editor;
            $send_mail->SendMail($Id_Editor,'requestorder-html','requestorder-text','Order');
        }
        return $post->save() ? $post : null;
    }
    /*function PageCount_DOCX() {
        $pageCount = 0;

        $zip = new \ZipArchive();

        if($zip->open($this->upload_file->tempName) === true) {
            if(($index = $zip->locateName('docProps/app.xml')) !== false)  {
                $data = $zip->getFromIndex($index);
                $zip->close();
                $xml = new \SimpleXMLElement($data);
                $pageCount = $xml->Pages;
                $this->number_of_page = $pageCount;
            }
            //$zip->close();
        }
        return $pageCount;
    }*/
    function Process_Price_Oder(){
        $price_type_of_service = (ServicePrice::findOne($this->type_of_service))->Price_USA;
        $price_type_of_paper = (ServicePrice::findOne($this->type_of_paper))->Price_USA;
        $price_type_of_subject_area = (ServicePrice::findOne($this->subject_area))->Price_USA;
        //$price_type_of_writer = (ServicePrice::findOne($this->Type_of_currency))->Price_USA;
        $price_urgency = (ServicePrice::findOne($this->urgency))->Price_USA;
        $price_perpage_file = $this->number_of_page *(ServicePrice::findOne('29'))->Price_USA;
        $total_price = $price_type_of_service + $price_type_of_paper+$price_type_of_subject_area + $price_urgency+$price_perpage_file;
        $price_writer_level = ($total_price *(ServicePrice::findOne($this->writer_level))->Price_USA)/100;
        $price_customer_service = ($total_price*(ServicePrice::findOne($this->customer_service))->Price_USA)/100;
        $this->prices_order = ($total_price+$price_writer_level + $price_customer_service);
        if ($this->Type_of_currency == 30){
            $this->total_prices = $this->prices_order;
            $this->id_type_of_currency = 'usd';
       }else if ($this->Type_of_currency == 31){
            $this->total_prices = $this->prices_order * ServicePrice::findAll(['Id_Service'=>'11','Name_Service_Price'=>'VND'])[0]->Price_VN;
            $this->id_type_of_currency = 'vnd';
        }
    }
}